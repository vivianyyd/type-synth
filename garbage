//    private fun typesAfterArgsAssumingFnTree(args: Int, tree: TypeSearchNode): List<TypeSearchNode> {
//        TODO()
//    }
//
//    // TODO how is this different from weird unify
//    private fun typeInTree(type: Type, tree: TypeSearchNode): Boolean {
//        // see if proposed type is contained in possible types of expr
//        // Traverse down type and see if path something something in search tree. Complicated bc expr guides jumps
//        if (tree.type is TypeHole) return true
//        when (type) {
//            // Base cases
//            is TypeHole -> return true
//            is Variable -> return tree.type is Variable// No need to match the exact variable; ignore any context since we just want a coarse vertical prune
//            is Error -> return false  // TODO ?
//            // Inductive cases
//            is Function -> {
//                if (tree.type !is Function) return false
//                return typeInForest(type.left, tree.children[0]) && typeInForest(type.rite, tree.children[1])
//            }
//            is LabelNode -> {
//                if (tree.type !is LabelNode || tree.type.label != type.label || tree.type.params.size != type.params.size) return false
////                println(tree.type.params.size)
////                println(tree.children.size)
////                println(type.params.size)
////                println(Visualizer.viz(tree))
//                return type.params.withIndex().all { (i, p) -> typeInForest(p, tree.children[i]) }
//            }
//        }
//    }
//
//    private fun typeInForest(type: Type, trees: List<TypeSearchNode>?) =
//        trees?.any { typeInTree(type, it) }?: true   // unfilled tree is like a hole... TODO fix this...
//
//    private fun canBeType(type: Type, expr: Application, tree: TypeSearchNode): Boolean {
//        // We already assume the searchTree is to some extent consistent with the expression.
//        // Now resolve the expression partially, in order to check against [type]
//        val exprTypes = typesAfterArgsAssumingFnTree(expr.arguments?.size ?: 0, tree)
//        return typeInForest(type, exprTypes)
//    }
//
//    /** Whether all in [expressions] might unify with [type] according to the current search state [tree]*/
//    fun canAllBeType(type: Type, expressions: List<Application>, tree: SearchTree): Boolean {
//        if (expressions.isEmpty()) return true
//        val name = expressions[0].name
//        assert(expressions.all{it.name == name})
//        val tyRoot = tree.root.children[tree.root.names.indexOf(name)]!![0]  // Should be no NPE, just single ChildHole
//        var curr = tyRoot
//
////        if (t !is Function) return false
////        var height = 2
////        // Iterate to bottom-rightmost arrow node
////        var curr: Function = t
////        var next = curr.rite
////        while (next is Function) {
////            curr = next
////            next = curr.rite
////            height++
////        }
////        if (height != t.height) return false  // We didn't fill this fn recently, so no need to prune against examples
////        val paramType = curr.left
////        // Check whether all examples have args in corresponding spot which can be this type
//
//        if (args == 0) return tree.children[0]!!
//        var currTree = tree
//        for (i in args downTo 0) {  // 0 instead of 1 bc we start with hole, so need extra iteration
//            if (currTree.children.all{it ==null})  return listOf(ChildHole()) // Not yet filled
//            if (args > 0) currTree = currTree.children[1]!!.filter { it.type is kotlin.Function }[0]  // Only take the fn path
//            assert(currTree.type is kotlin.Function)
//        }
//        println(Visualizer.viz(currTree))
//        // End state: The right children of currTree, a Function TypeSearchNode, are the possible results
//        return currTree.children[1]!!
//
//            return expressions.filter{ (it.arguments?.size ?: 0) <= paramsEnumed }.all { e ->
//            canBeType(type, e, tree)
//        }
//    }
