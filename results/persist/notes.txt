/usr/lib/jvm/java-11-oracle/bin/java -ea -javaagent:/home/vivianyyd/applications/idea-IU-221.5921.22/lib/idea_rt.jar=33745:/home/vivianyyd/applications/idea-IU-221.5921.22/bin -Dfile.encoding=UTF-8 -classpath /home/vivianyyd/type-synth/build/classes/kotlin/main:/home/vivianyyd/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk8/1.8.0/ed04f49e186a116753ad70d34f0ac2925d1d8020/kotlin-stdlib-jdk8-1.8.0.jar:/home/vivianyyd/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-reflect/1.8.0/1f1a6dba1301ab0985fbb8a47a77777af3386e08/kotlin-reflect-1.8.0.jar:/home/vivianyyd/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk7/1.8.0/3c91271347f678c239607abb676d4032a7898427/kotlin-stdlib-jdk7-1.8.0.jar:/home/vivianyyd/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib/1.8.0/1796921c7a3e2e2665a83e6c8d33399336cd39bc/kotlin-stdlib-1.8.0.jar:/home/vivianyyd/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-common/1.8.0/f7197e7cc76453ac59f8b0f8d5137cc600becd36/kotlin-stdlib-common-1.8.0.jar:/home/vivianyyd/.gradle/caches/modules-2/files-2.1/org.jetbrains/annotations/13.0/919f0dfe192fb4e063e7dacadee7f8bb9a2672a9/annotations-13.0.jar MainKt
[0:[_], tr:[_], []i:[_], []b:[_], [[]]i:[_], cons:[_ -> _ -> _]]
[0:[ℓ0[_]], tr:[ℓ0[_]], []i:[ℓ0[_]], []b:[ℓ0[_]], [[]]i:[ℓ0[_]], cons:[ℓ0[_] -> .0 -> .0, .0 -> ℓ0[_] -> .0, .0 -> .0 -> ℓ0[_]]]
No pruning occurred!
Contexts: 546875
Filter- passes all positives: 901
Exploded contexts: 2010
Total negexs: 6
Max rejected by exploded desired stuff: 6
Candidates which reject the max number of examples: 4
{0=ℓ0[ℓ0[_]], tr=ℓ0[ℓ1[]], []i=ℓ0[ℓ2[]], []b=ℓ1[], [[]]i=ℓ2[], cons=ℓ0[v0] -> v0 -> v0}
{0=ℓ0[ℓ0[_]], tr=ℓ0[ℓ2[]], []i=ℓ0[ℓ1[]], []b=ℓ2[], [[]]i=ℓ1[], cons=ℓ0[v0] -> v0 -> v0}
{0=ℓ1[], tr=ℓ2[], []i=ℓ0[ℓ1[]], []b=ℓ0[ℓ2[]], [[]]i=ℓ0[ℓ0[_]], cons=v0 -> ℓ0[v0] -> ℓ0[v0]}
{0=ℓ2[], tr=ℓ1[], []i=ℓ0[ℓ2[]], []b=ℓ0[ℓ1[]], [[]]i=ℓ0[ℓ0[_]], cons=v0 -> ℓ0[v0] -> ℓ0[v0]}

Process finished with exit code 0



/usr/lib/jvm/java-11-oracle/bin/java -ea -javaagent:/home/vivianyyd/applications/idea-IU-221.5921.22/lib/idea_rt.jar=35783:/home/vivianyyd/applications/idea-IU-221.5921.22/bin -Dfile.encoding=UTF-8 -classpath /home/vivianyyd/type-synth/build/classes/kotlin/main:/home/vivianyyd/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk8/1.8.0/ed04f49e186a116753ad70d34f0ac2925d1d8020/kotlin-stdlib-jdk8-1.8.0.jar:/home/vivianyyd/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-reflect/1.8.0/1f1a6dba1301ab0985fbb8a47a77777af3386e08/kotlin-reflect-1.8.0.jar:/home/vivianyyd/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-jdk7/1.8.0/3c91271347f678c239607abb676d4032a7898427/kotlin-stdlib-jdk7-1.8.0.jar:/home/vivianyyd/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib/1.8.0/1796921c7a3e2e2665a83e6c8d33399336cd39bc/kotlin-stdlib-1.8.0.jar:/home/vivianyyd/.gradle/caches/modules-2/files-2.1/org.jetbrains.kotlin/kotlin-stdlib-common/1.8.0/f7197e7cc76453ac59f8b0f8d5137cc600becd36/kotlin-stdlib-common-1.8.0.jar:/home/vivianyyd/.gradle/caches/modules-2/files-2.1/org.jetbrains/annotations/13.0/919f0dfe192fb4e063e7dacadee7f8bb9a2672a9/annotations-13.0.jar MainKt
No pruning occurred!
Contexts: 3300000
Filter- passes all positives: 4039
Exploded contexts: 10804
Total negexs: 6
Max rejected by exploded desired stuff: 6
Min: 0
Candidates which reject the max number of examples: 4
{0=ℓ0[ℓ0[_]], tr=ℓ0[ℓ1[]], []i=ℓ0[ℓ2[]], []b=ℓ1[], [[]]i=ℓ2[], cons=ℓ0[v0] -> v0 -> v0}
{0=ℓ0[ℓ0[_]], tr=ℓ0[ℓ2[]], []i=ℓ0[ℓ1[]], []b=ℓ2[], [[]]i=ℓ1[], cons=ℓ0[v0] -> v0 -> v0}
{0=ℓ1[], tr=ℓ2[], []i=ℓ0[ℓ1[]], []b=ℓ0[ℓ2[]], [[]]i=ℓ0[ℓ0[_]], cons=v0 -> ℓ0[v0] -> ℓ0[v0]}
{0=ℓ2[], tr=ℓ1[], []i=ℓ0[ℓ2[]], []b=ℓ0[ℓ1[]], [[]]i=ℓ0[ℓ0[_]], cons=v0 -> ℓ0[v0] -> ℓ0[v0]}

Process finished with exit code 0







Pruning unpruned fn apex looks like it works better bc it prunes l[_->_] for []i, which allows us to prune
l[_->_] from the second parameter for cons. But it's kind of a lie

The problem is that for 0/tr, we want to stop enumerating early so we don't have extra l of l of l of.
Our approach is to pause after one stage of no pruning.
But when we pause after one stage of no pruning, we also pause enumeration for [[]]i, so we never produce
l of l of int; in fact, it causes us to fail positive examples

BIG PRUNE AFTER NO PRUNE, THEN BLOWUP HOLES AND VARS: ...
BIG PRUNE AFTER NO PRUNE, THEN BLOWUP VARS: ...

========================================================================================================
PRUNE WHEN APEX IS FN AFTER NO PRUNE, THEN BLOWUP
FILL IN HOLES AND VARS WITH PARTITION BLOWUP VARS, **UNLESS THE VALUE IS NULLARY**

Lessons from this one
    Big pruning just fn apexes when no pruning happened is a hack, it has the same issue as the big prune -
        for ex if we prune a fn as a parameter, but the input in fact is a parameter, we just haven't enumed far enough
        to see that so we erroneously prune that param type
        The big prune is in general I think a bad idea, but the blowup seems too big to try anything without it
        I guess if we don't big prune, when making contexts we can do something more lazy (generator) to help but still
    Adding occams razor on num variables will prob give us the best results we can get
    Fill holes with variable partitions unless known to be nullary helps. We haven't yet implemented avoiding fresh vars
        on fn output types, although that might do something similar to the razor
    How to stop things from unwrapping backwards? 


Contexts: 3300000
Filter- passes all positives: 1913
Exploded contexts: 5392
Total negexs: 5
Max rejected by exploded desired stuff: 5
Min: 0
Candidates which reject the max number of examples: 10
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [_]}]}}
{0={ℓ2 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(0)]}, tr={ℓ1 of []}, []i={ℓ0 of [{ℓ2 of []}]}, []b={ℓ0 of [{ℓ1 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [_]}]}}

The below are wrong bc cons output contains a fresh variable, they are otherwise the same as the desired result,
but there is an extra variable which we don't need (and is also wrong)
We can get rid of this with occams razor on number of variables
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [_]}]}}
{0={ℓ2 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ1 of []}, []i={ℓ0 of [{ℓ2 of []}]}, []b={ℓ0 of [{ℓ1 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [_]}]}}

These unwrap backwards
{0={ℓ0 of [{ℓ0 of [_]}]}, cons=({ℓ0 of [v(1)]}) -> (v(1)) -> v(0), tr={ℓ0 of [{ℓ1 of []}]}, []i={ℓ0 of [{ℓ2 of []}]}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ0 of [{ℓ0 of [_]}]}, cons=({ℓ0 of [v(0)]}) -> (v(0)) -> v(0), tr={ℓ0 of [{ℓ1 of []}]}, []i={ℓ0 of [{ℓ2 of []}]}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ0 of [{ℓ0 of [_]}]}, cons=({ℓ0 of [v(1)]}) -> (v(1)) -> v(0), tr={ℓ0 of [{ℓ2 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ0 of [{ℓ0 of [_]}]}, cons=({ℓ0 of [v(0)]}) -> (v(0)) -> v(0), tr={ℓ0 of [{ℓ2 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}

The below are wrong, but adding positive example    cons []i (cons []i [[]]i) removes them! we are pretty sensitive to examples but ig that's ok
    {0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [{ℓ2 of []}]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [_]}]}}
    {0={ℓ2 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [{ℓ1 of []}]}, tr={ℓ1 of []}, []i={ℓ0 of [{ℓ2 of []}]}, []b={ℓ0 of [{ℓ1 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [_]}]}}

========================================================================================================
Same as above, but added negative example cons []b [[]]i
Our favorite one doesn't reject this bc we haven't gone deep enough in [[]]i to see that it's different from []b

{0={ℓ0 of [{ℓ0 of [_]}]}, cons=({ℓ0 of [v(1)]}) -> (v(1)) -> v(0), tr={ℓ0 of [{ℓ1 of []}]}, []i={ℓ0 of [{ℓ2 of []}]}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ0 of [{ℓ0 of [_]}]}, cons=({ℓ0 of [v(0)]}) -> (v(0)) -> v(0), tr={ℓ0 of [{ℓ1 of []}]}, []i={ℓ0 of [{ℓ2 of []}]}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ0 of [{ℓ0 of [_]}]}, cons=({ℓ0 of [v(1)]}) -> (v(1)) -> v(0), tr={ℓ0 of [{ℓ2 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ0 of [{ℓ0 of [_]}]}, cons=({ℓ0 of [v(0)]}) -> (v(0)) -> v(0), tr={ℓ0 of [{ℓ2 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}


========================================================================================================
BIG PRUNE AFTER NO PRUNE, THEN BLOWUP
FILL IN HOLES AND VARS WITH PARTITION BLOWUP VARS, **UNLESS THE VALUE IS NULLARY**

This has the problem where we distinguish group i/[]i and b/[]b by giving them the same label, bc with big prune
we don't enumerate nested labels for values, so they have holes, but we don't fill the holes with vars since we know it's
nullary, so we can only distinguish them with labels. Can't just prune when nothing was able to be pruned

Contexts: 11664
Filter- passes all positives: 130
Exploded contexts: 448
Total negexs: 5
Max rejected by exploded stuff: 3
Min: 0
Candidates which reject the max number of examples: 20

{0={ℓ0 of [_]}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ1 of []}, []i={ℓ0 of [_]}, []b={ℓ1 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ1 of []}, []i={ℓ0 of [_]}, []b={ℓ1 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ2 of []}, []i={ℓ0 of [_]}, []b={ℓ2 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ2 of []}, []i={ℓ0 of [_]}, []b={ℓ2 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(0)) -> (v(0)) -> {ℓ1 of []}, tr={ℓ1 of []}, []i={ℓ0 of [_]}, []b={ℓ1 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(0)) -> (v(0)) -> {ℓ2 of []}, tr={ℓ2 of []}, []i={ℓ0 of [_]}, []b={ℓ2 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ1 of []}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ0 of [_]}, []i={ℓ1 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ0 of [_]}, []i={ℓ1 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ2 of []}, []i={ℓ1 of []}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ2 of []}, []i={ℓ1 of []}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(1)) -> (v(1)) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [_]}, []i={ℓ1 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [_]}, []i={ℓ1 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> {ℓ2 of []}, tr={ℓ2 of []}, []i={ℓ1 of []}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ2 of []}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ0 of [_]}, []i={ℓ2 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ0 of [_]}, []i={ℓ2 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ1 of []}, []i={ℓ2 of []}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ1 of []}, []i={ℓ2 of []}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(1)) -> (v(1)) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [_]}, []i={ℓ2 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(0)) -> (v(0)) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [_]}, []i={ℓ2 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(0)) -> (v(0)) -> {ℓ1 of []}, tr={ℓ1 of []}, []i={ℓ2 of []}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}


========================================================================================================
No pruning occurred!
Contexts: 11664
Filter- passes all positives: 130
Exploded contexts: 6968
Total negexs: 5
Max rejected by exploded stuff: 5
Min: 0
Candidates which reject the max number of examples: 2896
TODO these are also bad anyway bc we shouldn't have holes in nullary. Holes should only expand to vars that aren't fresh if the thing isn't nullary. Whatever
{0={ℓ0 of [v(1)]}, cons=(v(0)) -> (v(1)) -> v(0), tr={ℓ0 of [v(1)]}, []i={ℓ0 of [v(0)]}, []b={ℓ0 of [v(1)]}, [[]]i={ℓ0 of [v(0)]}}
{0={ℓ0 of [v(1)]}, cons=(v(0)) -> (v(1)) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [v(1)]}, []i={ℓ0 of [v(0)]}, []b={ℓ0 of [v(1)]}, [[]]i={ℓ0 of [v(0)]}}
{0={ℓ0 of [v(1)]}, cons=(v(1)) -> ({ℓ0 of [v(0)]}) -> v(1), tr={ℓ0 of [v(0)]}, []i={ℓ0 of [v(1)]}, []b={ℓ0 of [v(0)]}, [[]]i={ℓ0 of [v(1)]}}
{0={ℓ0 of [v(1)]}, cons=({ℓ0 of [v(0)]}) -> (v(1)) -> v(0), tr={ℓ0 of [v(1)]}, []i={ℓ0 of [v(0)]}, []b={ℓ0 of [v(1)]}, [[]]i={ℓ0 of [v(0)]}}
{0={ℓ0 of [v(1)]}, cons=({ℓ0 of [{ℓ0 of [v(1)]}]}) -> (v(1)) -> v(1), tr={ℓ0 of [v(1)]}, []i={ℓ0 of [v(0)]}, []b={ℓ1 of []}, [[]]i={ℓ0 of [v(1)]}}



-==============================what's in this run? 2/13===========================
BUGGY big prune, no variable exploding

Contexts: 2115072
Filter- passes all positives: 8592
Candidates which reject 5 examples: 4
{0={ℓ0 of [{ℓ0 of [_]}]}, cons=({ℓ0 of [v(a)]}) -> (v(a)) -> v(a), tr={ℓ0 of [{ℓ1 of []}]}, []i={ℓ0 of [{ℓ2 of []}]}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ0 of [{ℓ0 of [_]}]}, cons=({ℓ0 of [v(a)]}) -> (v(a)) -> v(a), tr={ℓ0 of [{ℓ2 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}

    The above two are in the right direction, but they unwrap the wrong way - instead of 0 being l2, [[]]i is.
    We don't have infinite nesting in examples, fine
    also the ones we want dont reject enough exs bc [[]]i not deep enough. only l of l of hole. So then  try variable blowup
    THEN COMPARE DEP GRAPH STUFF

{0={ℓ0 of [{ℓ0 of [_]}]}, cons=({ℓ0 of [v(a)]}) -> (v(a)) -> {ℓ1 of []}, tr={ℓ0 of [{ℓ1 of []}]}, []i={ℓ0 of [{ℓ2 of []}]}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ0 of [{ℓ0 of [_]}]}, cons=({ℓ0 of [v(a)]}) -> (v(a)) -> {ℓ2 of []}, tr={ℓ0 of [{ℓ2 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}



WHAT WE WANTED (all reject exactly one negex)
{0={ℓ1 of []}, cons=(v(a)) -> ({ℓ0 of [_]}) -> {ℓ0 of [_]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ1 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [_]}]}}
(there are lots)
it's actually less good because there are less variables filled. the ones that do better only do better bc they have variables higher up in the tree, so they
are able to reject more examples earlier in a sense. now let's try doing variable blowup on the filtered ones

Out of memory error, most candidates have 9-11 spots
9 spots in {0={ℓ0 of [(_) -> _]}, cons=({ℓ0 of [(v(a)) -> {ℓ2 of []}]}) -> (v(a)) -> {ℓ0 of [_]}, tr={ℓ0 of [(_) -> _]}, []i={ℓ0 of [(_) -> _]}, []b={ℓ0 of [{ℓ1 of []}]}, [[]]i={ℓ0 of [{ℓ1 of []}]}}

Now let's just try the dep graph thing



======================================================================
Big prune after no prune
Cherry pick favorites
Variable blowup on those
(latest try i guess)


Exploded examples: 2048
Max rejected by exploded desired stuff: 5
Min: 1
Candidates which reject the max number of examples: 716
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ0 of [v(1)]}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [(v(0)) -> v(1)]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [(v(1)) -> v(0)]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [(v(0)) -> v(0)]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [(v(1)) -> v(0)]}}
Hey, this one rejects max num exs
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}

=== Big prune after no prune then variable blowup with variable nodes and holes ==================================
This has the same problem as blowup with all same variable

Contexts: 34992
Filter- passes all positives: 225
Total negexs: 5
Max rejected: 3
Candidates which reject the max number of examples: 10
{0={ℓ0 of [v(0)]}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ1 of []}, []i={ℓ0 of [v(0)]}, []b={ℓ1 of []}, [[]]i={ℓ0 of [v(0)]}}
{0={ℓ0 of [v(0)]}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ2 of []}, []i={ℓ0 of [v(0)]}, []b={ℓ2 of []}, [[]]i={ℓ0 of [v(0)]}}
{0={ℓ1 of []}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ2 of []}, []i={ℓ1 of []}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ2 of []}, []i={ℓ1 of []}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(1)) -> (v(1)) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [v(0)]}, []i={ℓ1 of []}, []b={ℓ0 of [v(0)]}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> {ℓ2 of []}, tr={ℓ2 of []}, []i={ℓ1 of []}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ2 of []}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ1 of []}, []i={ℓ2 of []}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ1 of []}, []i={ℓ2 of []}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(1)) -> (v(1)) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [v(0)]}, []i={ℓ2 of []}, []b={ℓ0 of [v(0)]}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(0)) -> (v(0)) -> {ℓ1 of []}, tr={ℓ1 of []}, []i={ℓ2 of []}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}

=============================================================================================
PRUNE WHEN APEX IS FN AFTER NO PRUNE, THEN BLOWUP

FILL IN ALL HOLES AND VARS WITH PARTITION BLOWUP VARS.


Contexts: 3300000
Filter- passes all positives: 1913
Exploded contexts: 74998
Total negexs: 5
Max rejected by exploded desired stuff: 5
Min: 0
Candidates which reject the max number of examples: 31170


{0={ℓ0 of [{ℓ0 of [v(1)]}]}, cons=(v(0)) -> ({ℓ0 of [{ℓ0 of [v(1)]}]}) -> {ℓ0 of [{ℓ0 of [v(0)]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ0 of [v(0)]}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ0 of [{ℓ0 of [v(1)]}]}, cons=({ℓ0 of [{ℓ0 of [{ℓ0 of [(v(0)) -> v(0)]}]}]}) -> (v(1)) -> {ℓ0 of [v(1)]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ0 of [v(1)]}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ0 of [{ℓ0 of [v(1)]}]}, cons=({ℓ0 of [{ℓ0 of [{ℓ0 of [(v(0)) -> v(0)]}]}]}) -> ({ℓ0 of [{ℓ0 of [{ℓ1 of []}]}]}) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ0 of [v(0)]}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> v(0), tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> v(0), tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(1)]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(1)]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(1)]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(1)]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(1)]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(1)]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(1)]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(1)]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(1)]}, tr={ℓ0 of [{ℓ1 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [{ℓ1 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [{ℓ1 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [{ℓ1 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(1)]}, tr={ℓ0 of [{ℓ2 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [{ℓ2 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [{ℓ2 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [{ℓ2 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(1)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [v(0)]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [v(1)]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [v(0)]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [v(1)]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [v(0)]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [v(1)]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [v(0)]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [v(1)]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [v(0)]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [{ℓ0 of [v(0)]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [v(1)]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [{ℓ0 of [v(1)]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [v(0)]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [v(1)]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [v(0)]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [v(1)]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [v(0)]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [{ℓ0 of [v(0)]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(1)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(1)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(1)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(1)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(1)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(1)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(1)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(1)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}, tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [{ℓ1 of []}]}]}, tr={ℓ0 of [{ℓ1 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [{ℓ0 of [{ℓ1 of []}]}]}, tr={ℓ0 of [{ℓ1 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ0 of [{ℓ2 of []}]}]}, tr={ℓ0 of [{ℓ2 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [{ℓ0 of [{ℓ2 of []}]}]}, tr={ℓ0 of [{ℓ2 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [{ℓ2 of []}]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [{ℓ2 of []}]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}) -> v(1), tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ0 of [v(1)]}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}) -> v(0), tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ0 of [v(0)]}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}) -> v(1), tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ0 of [v(0)]}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}) -> v(0), tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ0 of [v(1)]}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}) -> v(1), tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ0 of [v(0)]}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}) -> v(0), tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ0 of [v(1)]}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}) -> v(1), tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ0 of [v(1)]}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}) -> v(0), tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ0 of [v(0)]}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}) -> v(1), tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ0 of [v(1)]}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}) -> v(0), tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ0 of [v(0)]}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}) -> v(1), tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ0 of [v(0)]}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}) -> v(0), tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ0 of [v(1)]}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}) -> v(1), tr={ℓ0 of [{ℓ0 of [v(0)]}]}, []i={ℓ0 of [{ℓ0 of [v(0)]}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [{ℓ0 of [{ℓ0 of [v(0)]}]}]}) -> v(0), tr={ℓ0 of [{ℓ0 of [v(1)]}]}, []i={ℓ0 of [{ℓ0 of [v(1)]}]}, []b={ℓ0 of [{ℓ0 of [v(1)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}