Partial contexts (contexts made from all leaves with no sibling merging): 2916
Filter- passes all positives: 1512
Contexts (all contexts from types after sibling merging): 11664
Filter- passes all positives: 130

Pretty cool how sibling merging helps us...
Despite more contexts, less pass the filter




Why don't I keep enumerating for the literals?

Pruning unpruned fn apex looks like it works better bc it prunes l[_->_] for []i, which allows us to prune
l[_->_] from the second parameter for cons. But it's kind of a lie



The problem is that for 0/tr, we want to stop enumerating early so we don't have extra l of l of l of.
Our approach is to pause after one stage of no pruning.
But when we pause after one stage of no pruning, we also pause enumeration for [[]]i, so we never produce
l of l of int; in fact, it causes us to fail positive examples




Let's try pruning everything after no prune, then var blowup with vars and holes

Why do these all have [[]]i have the same variable as []i? If it was different we'd be a little happier



-==============================what's in this run? 2/13===========================
BUGGY big prune
no variable exploding

Contexts: 2115072
Filter- passes all positives: 8592
Total negexs: 5
Max rejected: 5
Candidates which reject the max number of examples: 4
{0={ℓ0 of [{ℓ0 of [_]}]}, cons=({ℓ0 of [v(a)]}) -> (v(a)) -> v(a), tr={ℓ0 of [{ℓ1 of []}]}, []i={ℓ0 of [{ℓ2 of []}]}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ0 of [{ℓ0 of [_]}]}, cons=({ℓ0 of [v(a)]}) -> (v(a)) -> v(a), tr={ℓ0 of [{ℓ2 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}

    The above two are in the right direction, but they unwrap the wrong way - instead of 0 being l2, [[]]i is.
    We don't have infinite nesting in examples, fine
    also the ones we want dont reject enough exs bc [[]]i not deep enough. only l of l of hole. So then  try variable blowup
    THEN COMPARE DEP GRAPH STUFF

{0={ℓ0 of [{ℓ0 of [_]}]}, cons=({ℓ0 of [v(a)]}) -> (v(a)) -> {ℓ1 of []}, tr={ℓ0 of [{ℓ1 of []}]}, []i={ℓ0 of [{ℓ2 of []}]}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ0 of [{ℓ0 of [_]}]}, cons=({ℓ0 of [v(a)]}) -> (v(a)) -> {ℓ2 of []}, tr={ℓ0 of [{ℓ2 of []}]}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}



WHAT WE WANTED (all reject exactly one negex)
{0={ℓ1 of []}, cons=(v(a)) -> ({ℓ0 of [_]}) -> {ℓ0 of [_]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ1 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [_]}]}}
(there are lots)
it's actually less good because there are less variables filled. the ones that do better only do better bc they have variables higher up in the tree, so they
are able to reject more examples earlier in a sense. now let's try doing variable blowup on the filtered ones

Out of memory error, most candidates have 9-11 spots
9 spots in {0={ℓ0 of [(_) -> _]}, cons=({ℓ0 of [(v(a)) -> {ℓ2 of []}]}) -> (v(a)) -> {ℓ0 of [_]}, tr={ℓ0 of [(_) -> _]}, []i={ℓ0 of [(_) -> _]}, []b={ℓ0 of [{ℓ1 of []}]}, [[]]i={ℓ0 of [{ℓ1 of []}]}}

Now let's just try the dep graph thing











======================================================================
Big prune after no prune
Cherry pick favorites
Variable blowup on those
(latest try i guess)


Exploded examples: 2048
Max rejected by exploded desired stuff: 5
Min: 1
Candidates which reject the max number of examples: 716
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(1)]}, tr={ℓ2 of []}, []i={ℓ0 of [(v(0)) -> v(1)]}, []b={ℓ0 of [(v(0)) -> v(1)]}, [[]]i={ℓ0 of [(v(0)) -> v(1)]}}
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [(v(0)) -> v(0)]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(1)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ0 of [v(0)]}]}, []b={ℓ0 of [(v(1)) -> v(0)]}, [[]]i={ℓ0 of [(v(1)) -> v(0)]}}
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ0 of [v(0)]}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ0 of [v(1)]}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [(v(0)) -> v(1)]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [(v(1)) -> v(0)]}, [[]]i={ℓ0 of [{ℓ0 of [v(1)]}]}}
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ0 of [v(0)]}]}, [[]]i={ℓ0 of [(v(0)) -> v(0)]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [(v(1)) -> v(0)]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [(v(1)) -> v(0)]}}
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [(v(0)) -> v(0)]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [(v(1)) -> v(0)]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(1)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [v(1)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}
Hey, this one rejects max num exs
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ0 of [v(0)]}]}}



Process finished with exit code 0

========================================================





WHAT WE WANTED
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [{ℓ1 of []}]}) -> {ℓ0 of [{ℓ1 of []}]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ1 of []}]}, []b={ℓ0 of [{ℓ1 of []}]}, [[]]i={ℓ0 of [{ℓ1 of []}]}}
{0={ℓ1 of []}, cons=(v(1)) -> ({ℓ0 of [{ℓ2 of []}]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ2 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ2 of []}]}}
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [{ℓ2 of []}]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ2 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ2 of []}]}}
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [{ℓ2 of []}]}) -> {ℓ0 of [{ℓ2 of []}]}, tr={ℓ2 of []}, []i={ℓ0 of [{ℓ2 of []}]}, []b={ℓ0 of [{ℓ2 of []}]}, [[]]i={ℓ0 of [{ℓ2 of []}]}}




{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ2 of []}, []i={ℓ0 of [v(0)]}, []b={ℓ0 of [v(0)]}, [[]]i={ℓ0 of [v(0)]}}
	false
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [v(0)]}, []b={ℓ0 of [v(0)]}, [[]]i={ℓ0 of [v(0)]}}
	false
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> {ℓ1 of []}, tr={ℓ2 of []}, []i={ℓ0 of [v(0)]}, []b={ℓ0 of [v(0)]}, [[]]i={ℓ0 of [v(0)]}}
	false
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> {ℓ2 of []}, tr={ℓ2 of []}, []i={ℓ0 of [v(0)]}, []b={ℓ0 of [v(0)]}, [[]]i={ℓ0 of [v(0)]}}
	false
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> v(0), tr={ℓ2 of []}, []i={ℓ0 of [v(0)]}, []b={ℓ0 of [v(0)]}, [[]]i={ℓ0 of [v(0)]}}
	false
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(0)]}, tr={ℓ2 of []}, []i={ℓ0 of [v(0)]}, []b={ℓ0 of [v(0)]}, [[]]i={ℓ0 of [v(0)]}}
	false
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ1 of []}, tr={ℓ2 of []}, []i={ℓ0 of [v(0)]}, []b={ℓ0 of [v(0)]}, [[]]i={ℓ0 of [v(0)]}}
	false
{0={ℓ1 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ2 of []}, tr={ℓ2 of []}, []i={ℓ0 of [v(0)]}, []b={ℓ0 of [v(0)]}, [[]]i={ℓ0 of [v(0)]}}
	false
most negs rejected by what we wanted: 5

Process finished with exit code 0


=== Big prune after no prune then variable blowup with variable nodes and holes ==================================
This has the same problem as blowup with all same variable

Contexts: 34992
Filter- passes all positives: 225
Total negexs: 5
Max rejected: 3
Candidates which reject the max number of examples: 10
{0={ℓ0 of [v(0)]}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ1 of []}, []i={ℓ0 of [v(0)]}, []b={ℓ1 of []}, [[]]i={ℓ0 of [v(0)]}}
{0={ℓ0 of [v(0)]}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ2 of []}, []i={ℓ0 of [v(0)]}, []b={ℓ2 of []}, [[]]i={ℓ0 of [v(0)]}}
{0={ℓ1 of []}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ2 of []}, []i={ℓ1 of []}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ2 of []}, []i={ℓ1 of []}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(1)) -> (v(1)) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [v(0)]}, []i={ℓ1 of []}, []b={ℓ0 of [v(0)]}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> {ℓ2 of []}, tr={ℓ2 of []}, []i={ℓ1 of []}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ2 of []}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ1 of []}, []i={ℓ2 of []}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ1 of []}, []i={ℓ2 of []}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(1)) -> (v(1)) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [v(0)]}, []i={ℓ2 of []}, []b={ℓ0 of [v(0)]}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(0)) -> (v(0)) -> {ℓ1 of []}, tr={ℓ1 of []}, []i={ℓ2 of []}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}







Big prune if no pruning, except keep variables. Then variable blowup on variables only, not holes
Contexts: 34992
Filter- passes all positives: 1059
Total negexs: 5
Max rejected: 3
Candidates which reject the max number of examples: 20
{0={ℓ0 of [_]}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ1 of []}, []i={ℓ0 of [_]}, []b={ℓ1 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ2 of []}, []i={ℓ0 of [_]}, []b={ℓ2 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ1 of []}, []i={ℓ0 of [_]}, []b={ℓ1 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ2 of []}, []i={ℓ0 of [_]}, []b={ℓ2 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(0)) -> (v(0)) -> {ℓ1 of []}, tr={ℓ1 of []}, []i={ℓ0 of [_]}, []b={ℓ1 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(0)) -> (v(0)) -> {ℓ2 of []}, tr={ℓ2 of []}, []i={ℓ0 of [_]}, []b={ℓ2 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ1 of []}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ0 of [_]}, []i={ℓ1 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ2 of []}, []i={ℓ1 of []}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ0 of [_]}, []i={ℓ1 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ2 of []}, []i={ℓ1 of []}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(1)) -> (v(1)) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [_]}, []i={ℓ1 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [_]}, []i={ℓ1 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> {ℓ2 of []}, tr={ℓ2 of []}, []i={ℓ1 of []}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ2 of []}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ0 of [_]}, []i={ℓ2 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ1 of []}, []i={ℓ2 of []}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ0 of [_]}, []i={ℓ2 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ1 of []}, []i={ℓ2 of []}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(1)) -> (v(1)) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [_]}, []i={ℓ2 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(0)) -> (v(0)) -> {ℓ0 of [v(0)]}, tr={ℓ0 of [_]}, []i={ℓ2 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(0)) -> (v(0)) -> {ℓ1 of []}, tr={ℓ1 of []}, []i={ℓ2 of []}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}




WHAT WE WANTED BUT DIDN'T REJECT MAX EXS:
{0={ℓ2 of []}, cons=(v(0)) -> ({ℓ0 of [v(0)]}) -> {ℓ0 of [v(0)]}, tr={ℓ1 of []}, []i={ℓ0 of [_]}, []b={ℓ0 of [_]}, [[]]i={ℓ0 of [_]}}










BELOW: Bad to do big prune bc we run into the same problem where labels are used instead of variables
ABOVE: When doing big prune, let's try removing everything except for the variables

=== Big prune after no prune then variable blowup with only variable nodes =======================================
Contexts: 16038
Filter- passes all positives: 788
Total negexs: 5
Max rejected: 3
Candidates which reject the max number of examples: 18
{0={ℓ0 of [_]}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ1 of []}, []i={ℓ0 of [_]}, []b={ℓ1 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ2 of []}, []i={ℓ0 of [_]}, []b={ℓ2 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ1 of []}, []i={ℓ0 of [_]}, []b={ℓ1 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ2 of []}, []i={ℓ0 of [_]}, []b={ℓ2 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(0)) -> (v(0)) -> {ℓ1 of []}, tr={ℓ1 of []}, []i={ℓ0 of [_]}, []b={ℓ1 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(0)) -> (v(0)) -> {ℓ2 of []}, tr={ℓ2 of []}, []i={ℓ0 of [_]}, []b={ℓ2 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ1 of []}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ0 of [_]}, []i={ℓ1 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ2 of []}, []i={ℓ1 of []}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ0 of [_]}, []i={ℓ1 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ2 of []}, []i={ℓ1 of []}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> {ℓ0 of [_]}, tr={ℓ0 of [_]}, []i={ℓ1 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(0)) -> (v(0)) -> {ℓ2 of []}, tr={ℓ2 of []}, []i={ℓ1 of []}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ2 of []}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ0 of [_]}, []i={ℓ2 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(1)) -> (v(1)) -> v(0), tr={ℓ1 of []}, []i={ℓ2 of []}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ0 of [_]}, []i={ℓ2 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(0)) -> (v(0)) -> v(0), tr={ℓ1 of []}, []i={ℓ2 of []}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(0)) -> (v(0)) -> {ℓ0 of [_]}, tr={ℓ0 of [_]}, []i={ℓ2 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(0)) -> (v(0)) -> {ℓ1 of []}, tr={ℓ1 of []}, []i={ℓ2 of []}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}



=== Big prune after no prune then NO variable reassignment =======================================
Contexts: 11664
Filter- passes all positives: 130
Total negexs: 5
Max rejected: 3
Candidates which reject the max number of examples: 12
{0={ℓ0 of [_]}, cons=(v(a)) -> (v(a)) -> v(a), tr={ℓ1 of []}, []i={ℓ0 of [_]}, []b={ℓ1 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(a)) -> (v(a)) -> v(a), tr={ℓ2 of []}, []i={ℓ0 of [_]}, []b={ℓ2 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(a)) -> (v(a)) -> {ℓ1 of []}, tr={ℓ1 of []}, []i={ℓ0 of [_]}, []b={ℓ1 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ0 of [_]}, cons=(v(a)) -> (v(a)) -> {ℓ2 of []}, tr={ℓ2 of []}, []i={ℓ0 of [_]}, []b={ℓ2 of []}, [[]]i={ℓ0 of [_]}}
{0={ℓ1 of []}, cons=(v(a)) -> (v(a)) -> v(a), tr={ℓ0 of [_]}, []i={ℓ1 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(a)) -> (v(a)) -> v(a), tr={ℓ2 of []}, []i={ℓ1 of []}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(a)) -> (v(a)) -> {ℓ0 of [_]}, tr={ℓ0 of [_]}, []i={ℓ1 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ1 of []}}
{0={ℓ1 of []}, cons=(v(a)) -> (v(a)) -> {ℓ2 of []}, tr={ℓ2 of []}, []i={ℓ1 of []}, []b={ℓ2 of []}, [[]]i={ℓ1 of []}}
{0={ℓ2 of []}, cons=(v(a)) -> (v(a)) -> v(a), tr={ℓ0 of [_]}, []i={ℓ2 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(a)) -> (v(a)) -> v(a), tr={ℓ1 of []}, []i={ℓ2 of []}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(a)) -> (v(a)) -> {ℓ0 of [_]}, tr={ℓ0 of [_]}, []i={ℓ2 of []}, []b={ℓ0 of [_]}, [[]]i={ℓ2 of []}}
{0={ℓ2 of []}, cons=(v(a)) -> (v(a)) -> {ℓ1 of []}, tr={ℓ1 of []}, []i={ℓ2 of []}, []b={ℓ1 of []}, [[]]i={ℓ2 of []}}






==========================================/////////////////////////////////////////////////////
SCRATCHPAD


