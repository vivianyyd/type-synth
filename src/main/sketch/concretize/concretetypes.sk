package ct;
include "/home/vivianyyd/type-synth/src/main/sketch/util.sk";

adt Type {
    Variable { int tid; int vid; }
    Label { int l; List@list<Type> params; }
    Function { Type left; Type rite; }
}

struct Binding { int tid; int vid; Type t; }

Type applyBinding(Type t, int tid, int vid, Type sub) {
    switch (t) {
        case Label:{
            return new Label(l=t.l, params=applyBindingToAll(t.params, tid, vid, sub));
        }
        case Function:{
            return new Function(left=applyBinding(t.left, tid, vid, sub), rite=applyBinding(t.rite, tid, vid, sub));
        }
        case Variable:{
            if (t.tid == tid && t.vid == vid) return sub;
            else return t;
        }
    }
}

List@list<Type> applyBindingToAll(List@list<Type> types, int tid, int vid, Type sub) {
    List@list<Type> result = empty();
    switch (types) {
        case Cons:{
            List@list<Type> tmp = add(result, applyBinding(types.val, tid, vid, sub));
            return tmp;
        }
        case Nil:{ return result; }
    }
}

Type applyBindings(Type t, List@list<Binding> bindings) {
    switch (bindings) {
        case Cons:{ return applyBindings(applyBinding(t, bindings.val.tid, bindings.val.vid, bindings.val.t), bindings.next); }
        case Nil:{ return t; }
    }
}

List@list<Type> applyBindingsToAll(List@list<Type> types, List@list<Binding> bindings) {
    List@list<Type> result = empty();
    switch (types) {
        case Cons:{ return add(result, applyBindings(types.val, bindings)); }
        case Nil:{ return result; }
    }
}

List@list<Binding> unifyAll(List@list<Type> params, List@list<Type> args) {
    assert(len(params) == len(args));
    switch (params) {
        case Cons:{
            switch (args) {
                case Cons:{
                    List@list<Binding> bindings = unify(params.val, args.val);
                    if (bindings == null) return null;
                    List@list<Type> newParams = applyBindingsToAll(params.next, bindings);
                    List@list<Binding> remainingBindings = unifyAll(newParams, args.next);
                    if (remainingBindings == null) return null;
                    return plus(bindings, remainingBindings);
                }
                case Nil:{ assert false; }
            }
        }
        case Nil:{
            switch (args) {
                case Cons:{ assert false; }
                case Nil:{ return empty(); }
            }
        }
    }
}

/** Returns a list of bindings resulting from unifying [arg] with [param], or null if they are incompatible. */
List@list<Binding> unify(Type param, Type arg) {
    switch(param) {
        case Variable:{
            Binding b = new Binding(tid=param.tid, vid=param.vid, t=arg);
            return single(b);
        }
        case Label:{
            switch(arg) {
                case Variable:{ assert false; }  // TODO I think invariant. If we had []: L<a> this would be different
                case Label:{
                    if (param.l != arg.l || len(param.params) != len(arg.params)) return null;
                    return unifyAll(param.params, arg.params);
                }
                case Function:{ return null; }
            }
        }
        case Function:{
            switch(arg) {
                case Variable:{ assert false; }  // TODO I think invariant
                case Label:{ return null; }
                case Function:{
                    List@list<Binding> leftBindings = unify(param.left, arg.left);
                    if (leftBindings == null) return null;
                    Type newParamRight = applyBindings(param.rite, leftBindings);
                    List@list<Binding> riteBindings = unify(newParamRight, arg.rite);
                    if (riteBindings == null) return null;
                    return plus(leftBindings, riteBindings);
                }
            }
        }
    }
}

/**
 Returns the output type of [fn] on input [arg] with no free variables, or null if [arg] is invalid for [fn].
 */
Type apply(Function fn, Type arg) {
    List@list<Binding> b = unify(fn.left, arg);
    if (b == null) return null;
    return applyBindings(fn.rite, b);
}

boolean isFunction(Type t) {
    switch(t) {
        case Variable:{ return false; }  // TODO think about this
        case Label:{ return false; }
        case Function:{ return true; }
    }
}

struct LabelKind { int l; int numParams; }

List@list<LabelKind> makeLabelKinds(ref int numLKs) {
    int nKinds = ??;
    minimize (nKinds);
    List@list<LabelKind> register = empty();
    for (int i = 0; i < nKinds; i++) {
        int nParams = ??;
        minimize (nParams);
        register = add(register, new LabelKind(l=i, numParams=nParams));
    }
    numLKs = len(register);
    return register;
}

generator int makeLabelVars() {
    int nVars = ??;
    minimize (nVars);
    return nVars;
}

generator Type type(List@list<LabelKind> register, int numLKs, int tid, int groundVars, int labelVars) {
    int t = ??;
    if (t == 0) {
        return variable(tid, groundVars, labelVars);
    }
    if (t == 1) {
        return label(register, numLKs, tid, groundVars, labelVars);
    }
    if (t == 2) {
        Type a = type(register, numLKs, tid, groundVars, labelVars);
        Type b = type(register, numLKs, tid, groundVars, labelVars);
        return new Function(left=a, rite=b);
    }
    assert false;
}

generator Label label(List@list<LabelKind> register, int numLKs, int tid, int groundVars, int labelVars) {
    int ind = ??;
    assert (ind < numLKs);
    LabelKind lk = get(register, ind);
    List@list<Type> params = empty();
    for (int i = 0; i < lk.numParams; i++) {
        params = add(params, type(register, numLKs, tid, groundVars, labelVars));
    }
    return new Label(l=lk.l, params=params);
}

generator Variable variable(int tid, int groundVars, int labelVars) {
    int v = ??;
    assert (v < groundVars + labelVars);
    return new Variable(tid=tid, vid=v);
    // TODO we can add preference to variables bound outside of labels but that would be oddly asymmetric
}

generator Variable variableInLabel(int tid, int groundVars, int labelVars) {
    int v = ??;
    assert (v < labelVars);
    return new Variable(tid=tid, vid=groundVars + v);
}

generator Label clabel(List@list<LabelKind> register, int numLKs, int tid, int groundVars, int labelVars) {
    int ind = ??;
    assert (ind < numLKs);
    LabelKind lk = get(register, ind);
    List@list<Type> params = empty();
    for (int i = 0; i < lk.numParams; i++) {
        params = add(params, ctype(register, numLKs, tid, groundVars, labelVars));
    }
    return new Label(l=lk.l, params=params);
}
generator Type ctype(List@list<LabelKind> register, int numLKs, int tid, int groundVars, int labelVars) {
    int t = ??;
    if (t == 1) {
        return label(register, numLKs, tid, groundVars, labelVars);
    }
    if (t == 2) {
        Type a = type(register, numLKs, tid, groundVars, labelVars);
        Type b = type(register, numLKs, tid, groundVars, labelVars);
        return new Function(left=a, rite=b);
    }
    assert false;
}
