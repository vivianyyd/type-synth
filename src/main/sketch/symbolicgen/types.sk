include "/home/vivianyyd/type-synth/src/main/sketch/util.sk";

adt Type {
    ConcreteLabel { int dummy; }
    VarBind { int id; }
    VarRef { int id; }
    VarLabelBound { }
    Label { }
    Function { Type left; Type rite; }
}

struct Binding { int id; Type t; }

Type applyBinding(Type t, int varId, Type sub) {
    switch (t) {
        case ConcreteLabel:{ return t; }
        case VarLabelBound:{ return t; }
        case Label:{ return t; }
        case Function:{
            return new Function(left=applyBinding(t.left, varId, sub), rite=applyBinding(t.rite, varId, sub));
        }
        case VarBind:{ return t; }
        case VarRef:{
            if (t.id == varId) return sub;
            else return t;
        }
    }
}

Type applyBindings(Type t, List<Binding> bindings) {
    switch (bindings) {
        case Cons:{ return applyBindings(applyBinding(t, bindings.val.id, bindings.val.t), bindings.next); }
        case Nil:{ return t; }
    }
}

/** Returns a list of bindings resulting from unifying [arg] with [param], or null if they are incompatible. */
List<Binding> unify(Type param, Type arg) {
    switch(param) {
        case VarBind:{
            Binding b = new Binding(id=param.id, t=arg);
            return single(b);
        }
        case VarLabelBound:{ return empty(); }
        case ConcreteLabel:{
            switch(arg) {
                case ConcreteLabel:{
                    if (param.dummy == arg.dummy) return empty();
                    return null;
                }
                case VarLabelBound:{ return empty(); }
                case Label:{ return empty(); }
                case Function:{ return null; }
                // Invariants
                case VarBind:{ assert false; }
                case VarRef:{ assert false; }
            }
        }
        case Label:{
            switch(arg) {
                case ConcreteLabel:{ return empty(); }
                case VarLabelBound:{ return empty(); }
                case Label:{ return empty(); }
                case Function:{ return null; }
                // Invariants
                case VarBind:{ assert false; }
                case VarRef:{ assert false; }
            }
        }
        case Function:{
            switch(arg) {
                case VarLabelBound:{ return empty(); }
                case Label:{ return null; }
                case ConcreteLabel:{ return null; }
                case Function:{
                    List<Binding> leftBindings = unify(param.left, arg.left);
                    if (leftBindings == null) return null;
                    Type newParamRight = applyBindings(param.rite, leftBindings);
                    List<Binding> riteBindings = unify(newParamRight, arg.rite);
                    if (riteBindings == null) return null;
                    return plus(leftBindings, riteBindings);
                }
                // Invariants
                case VarBind:{ assert false; }
                case VarRef:{ assert false; }
            }
        }
        case VarRef:{ assert false; }  // Invariant
    }
}

/**
 Returns the output type of [fn] on input [arg] with no free variables, or null if [arg] is invalid for [fn].
 */
Type apply(Function fn, Type arg) {
    //   TODO These invariants could be enforced in the grammar but whatever for now
    //   types should never be a VarRef here! resolve all types upon application
    //   types should never be a VarBind at the top level! can only be under left side of fns
    //   I think arg can't be VarRef either
    Type param = fn.left;

    // Assert invariants before short circuiting logic
    switch(arg) {
        case VarBind:{ assert false; }
        case VarRef:{ assert false; }
        case VarLabelBound:{ }
        case Label:{ }
        case ConcreteLabel:{ }
        case Function:{ }
    }

    List<Binding> b = unify(param, arg);
    if (b == null) return null;
    return applyBindings(fn.rite, b);
    // Invariant: returned type never contains VarRef!!!! think about this..
}

boolean isFunction(Type t) {
    switch(t) {
        case VarBind:{ return false; }
        case VarRef:{ return false; }
        case VarLabelBound:{ return false; }
        case Label:{ return false; }
        case ConcreteLabel:{ return false; }
        case Function:{ return true; }
    }
}
