adt Type {
    Var { List<Var> possBindings; }
    Label { }
    Function { Type left; Type rite; }
}

boolean leq(Type small, Type big) {
    // TODO add some reasoning about bindings
    switch(big) {
        case Var:{ return true; }
        case Label:{
            switch(small) {
                case Var:{ return true; }
                case Label:{ return true; }
                case Function:{ return false; }
            }
        }
        case Function:{
            switch(small) {
                case Var:{ return true; }
                case Label:{ return false; }
                case Function:{ return true; }
            }
        }
    }
}

boolean isFunction(Type t) {
    switch(t) {
        case Var:{ return false; }
        case Label:{ return false; }
        case Function:{ return true; }
    }
}

int len <T> (List<T> l) {
    switch(l){
        case Cons:{ return 1 + len(l.next); }
        case Nil:{ return 0; }
    }
}
