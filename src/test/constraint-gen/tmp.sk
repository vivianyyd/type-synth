// TODO fix this file stuff
include "/home/vivianyyd/applications/sketch-1.7.6/sketch-frontend/sketchlib/array.skh";
include "/home/vivianyyd/type-synth/src/test/sketch/util.sk";

// Returns the ith argument of the tth example.
Tree get_ex(int t, int i) {
	if (t == 0) {
	    if (i == 0) {
	        return new LiteralTree(label = new LiteralLabel(label = str(4, "int")),
                                   children = zeroChildren());
	    }
	    if (i == 1) { return newUncertain(3, "t2"); }
	    if (i == 2) { return newUncertain(3, "t2"); }
	}
    if (t == 1) {
        if (i == 0) { return newUncertain(3, "t1"); }
        if (i == 1) { return newUncertain(3, "t2"); }
        if (i == 2) { return newUncertain(3, "t2"); }
    }
    if (t == 2) {
        if (i == 0) { return newUncertain(3, "t2"); }
        if (i == 1) { return newUncertain(3, "t3"); }
        if (i == 2) { return newUncertain(3, "t3"); }
    }
}

void positive_example_finder(ref Tree x0, ref Tree x1, ref Tree o){
    int t = ??;
    x0 = get_ex(t, 0);
    x1 = get_ex(t, 1);
    o = get_ex(t, 2);
}

// TODO getting negative examples is nontrivial due to partial application
void negative_example_finder(ref Tree x0, ref Tree x1, ref Tree o){
    int t = ??;
    x0 = get_ex(t, 0);
    x1 = get_ex(t, 1);
    Tree real_o = get_ex(t, 2);

    int s = ??;
    o = get_ex(s, 2);
    assert o != real_o;
}

void positive_example(ref Tree x0, ref Tree x1, ref Tree o){
	positive_example_finder(x0, x1, o);
}

void negative_example(ref Tree x0, ref Tree x1, ref Tree o){
	negative_example_finder(x0, x1, o);
}

// For all selections of examples, x1 and o match
harness void type_equality(int t) {
    assume t <= 3;  // the number of examples goes here
	Tree x0 = get_ex(t, 0);
	Tree x1 = get_ex(t, 1);
	Tree o =  get_ex(t, 2);
    assert equalsTree(x1, o);
}

/* Confirms that an argument is not a node with children. */
//harness void not_parametrized() {
//	Tree x0 = new Dummy();
//	Tree x1 = new Dummy();
//	Tree o = new Dummy();
//	positive_example_finder(x0, x1, o);
//
//    switch(x0){  // we'll make separate copies of this function for each argument
//        case LiteralTree:{
//             assert x0.children == zeroChildren();
//        }
//        case Uncertain:{
//             assert x0.children == zeroChildren();
//        }
//        case Parameter:{ assert false; }
//        case Child:{ assert false; }
//        case TypeApplication:{ assert false; }
//        case Dummy:{ assert false; }
//    }
//}
