package UTIL;

include "/home/vivianyyd/applications/sketch-1.7.6/sketch-frontend/sketchlib/array.skh";

int MAX_NUM_VARS = 3;

adt Type{
    Variable { int id; }
    Function { Type in; Type out; }
    Node { int label; Array<Type> params; }
    Error { }
}

// TODO does this actually help
generator int bounded_number(int bound) {
    int n = ??;
    assert n > -1 && n < bound;
    return n;
}

generator Type type() {
    int t = ??;
    if (t == 1) { return new Variable(id = bounded_number(2*MAX_NUM_VARS)); }  // arbitrarily picked
    Type a = type();
    Type b = type();
    if (t == 2) { return new Function(in = a, out = b); }
    if (t == 3) {
        int n_params = ??;
        assert n_params <= MAX_NUM_VARS;
        Array<Type> arr = newArray();
        for (int i = 0; i < n_params; i++) {
            Type elem;
            // Reuse previous calls to type generator
            if (i == 0) { elem = a; }
            if (i == 1) { elem = b; }
            else { elem = type(); }
            add(arr, elem);
        }
        return new Node(label = bounded_number(2*MAX_NUM_VARS), params=arr);
    }
}

struct UnificationResult {
    Type type;
    Type[MAX_NUM_VARS] var_map;
}

UnificationResult unifyVar(Variable var, Type target, Type[MAX_NUM_VARS] var_map) {
    if (var_map[var.id] != null) { return unify(var_map[var.id], target, var_map); }
    else {  // todo test this actually checks variable not in map
        var_map[var.id] = target;
        return new UnificationResult(type=target, var_map=var_map);
    }
}

/** Just here for readability */
UnificationResult error(Type[MAX_NUM_VARS] var_map) {
    return new UnificationResult(type=new Error(), var_map=var_map);
}

UnificationResult unify(Type a, Type b, Type[MAX_NUM_VARS] var_map) {
    switch(a){
        case Variable:{
            // There needs to be a switch on b directly under each case, since we want errors to redirect quickly.
            switch(b){
                case Variable:{
                    // Unwrap b if possible
                    // TODO check if this unwrapping is right
                    if (var_map[b.id] != null) { return unify(var_map[b.id], a, var_map); }
                    return unifyVar(a, b, var_map);
                }
                case Function:{ return unifyVar(a, b, var_map); }
                case Node:{ return unifyVar(a, b, var_map); }
                case Error:{ return error(var_map); }
            }
        }
        case Function:{
            switch(b){
                case Variable:{ return unifyVar(b, a, var_map); }
                case Function:{
                    // TODO is this even right, don't I need to return a function type
                    UnificationResult curry = unify(a.in, b.in, var_map);  // TODO is this even a sensible name
                    return unify(a.out, b.out, curry.var_map);  // TODO need to return OG context? check this is the correct context to return. if fn is (a->a) -> a unify with (int->int)-> int
                }
                case Node:{ return error(var_map); }
                case Error:{ return error(var_map); }
            }
        }
        case Node:{
            switch(b){
                case Variable:{ return unifyVar(b, a, var_map); }
                case Function:{ return error(var_map); }
                case Node:{
                    if (a.label != b.label) return error(var_map);
                    if (a.params.sz != b.params.sz) return error(var_map);
                    for (int i = 0; i < a.params.sz; i++) {
                        // TODO think about variable binding here more
                        UnificationResult unifyChild = unify(a.params.inner.val[i], b.params.inner.val[i], var_map);
                        Type ty = unifyChild.type;
                        switch (ty) {
                            case Variable:{}
                            case Function:{}
                            case Node:{}
                            case Error:{ return error(var_map); }
                        }
                    }
                    // TODO we actually have to make a new type containing all the results of unifying the children
                    return new UnificationResult(type=a, var_map=var_map);
                }
                case Error:{ return error(var_map); }
            }
        }
        case Error:{ return error(var_map); }
    }
}

UnificationResult resolve(Type ty, Type[MAX_NUM_VARS] var_map) {
    switch (ty) {
        case Variable: {
            // alpha should never mention itself
            return resolve(var_map[ty.id], var_map);
        }
        case Function: {
            UnificationResult resolveIn = resolve(ty.in, var_map);
            UnificationResult resolveOut = resolve(ty.out, resolveIn.var_map);
            Type fn = new Function(in=resolveIn.type, out=resolveOut.type);
            return new UnificationResult(type=fn, var_map=resolveOut.var_map);
            // TODO check I did the following: resolve both in and out and return new function with them
            // resolve out using the var map from resolving in.
        }
        case Node: {
            // TODO
//            int label; Array<Type> params;
        }
        case Error: { }
    }
    return null; // TODO removeme
}

UnificationResult apply(Type a, Type b, Type[MAX_NUM_VARS] var_map) {
    switch(a){
        case Function:{
            UnificationResult app = unify(a.in, b, var_map);
            return resolve(app.type, var_map);
        }
        case Variable:{ return error(var_map); }
        case Node:{ return error(var_map); }
        case Error:{ return error(var_map); }
    }
}

// TODO make this work
//T arrayOf<T>(int n, T[n] elems) {
//    Array<T> arr = newArray();
//    for (int i = 0; i < n; i++) {
//        add(arr, elems[i]);
//    }
//    return arr;
//}

Type generated_function_type() {
    return type();
}

harness void typecheck_passes_positives(int t) {
    assume t > -1 && t < 3;
    Type fun_type = generated_function_type();

    // a -> a list
    Type alpha = new Variable(id=2);
    Array<Type> childAlpha = newArray();
    add(childAlpha, alpha);
    Type listAlpha = new Node(label=1, params=childAlpha);
//    Type fun_type = new Function(in=alpha, out=listAlpha);

    // int -> int list
    Type intNode = new Node(label=0, params=newArray());
    Array<Type> childInt = newArray();
    add(childInt, intNode);
    Type listIntNode = new Node(label=1, params=childInt);
    Type example = new Function(in=intNode, out=listIntNode);
    Type[MAX_NUM_VARS] map;
    UnificationResult result = unify(fun_type, example, map);

    Type ty = result.type;
    switch (ty) {
        case Variable:{}
        case Function:{}
        case Node:{}
        case Error:{ assert false; }
    }

    // TODO check apply works by typechecking using it. positive examples
    // TODO Think about how to unify errors actually
    // TODO will it work if I just force all negative examples to unify with Error or something, maybe this is why we need an Apply function

// TODO Function type was not inlined enough. Increase inlining with --inlineamnt flag.

/*
adt Type{
    Variable { int id; }
    Function { Type in; Type out; }
    Node { int label; Array<Type> params; }
    Error { }
}
*/
    // TODO The example might only be a partial application, account for that eventually.
    //      Or maybe we only apply one argument by default? Idk. Why can't we just unify the whole function with each
    //      example rather than calling "Apply" like on the whiteboard
}

harness void typecheck_fails_negatives(int t) {
    assume t > -1 && t < 3;  // TODO this will select one example to test at a time
//    Type fun_type = generated_function_type();

    // a -> a list
    Type alpha = new Variable(id=2);
    Array<Type> childAlpha = newArray();
    add(childAlpha, alpha);
    Type listAlpha = new Node(label=1, params=childAlpha);
    Type fun_type = new Function(in=alpha, out=listAlpha);

    Type intNode = new Node(label=0, params=newArray());
    Array<Type> childInt = newArray();
    add(childInt, intNode);
    Type listIntNode = new Node(label=1, params=childInt);

    // int -> int
//    Type negative_example = new Function(in=intNode, out=intNode);
//    Type[MAX_NUM_VARS] map2;
//    UnificationResult result = unify(fun_type, negative_example, map2);

    // bool -> int list
    Type boolNode = new Node(label=3, params=newArray());
    Type negative_example2 = new Function(in=boolNode, out=listIntNode);
    Type[MAX_NUM_VARS] map3;
    UnificationResult result = unify(fun_type, negative_example2, map3);

    Type ty = result.type;
    switch (ty) {
        case Variable:{ assert false; }
        case Function:{ assert false; }
        case Node:{ assert false; }
        case Error:{}
    }
}
