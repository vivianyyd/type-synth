include "/home/vivianyyd/applications/sketch-1.7.6/sketch-frontend/sketchlib/array.skh";

// -------------------------------- Definitions ----------------------------------
adt Nullable<T> {
    None { }
    Some { T elem; }
}

adt Label {
    LiteralLabel { SArray<char> label; }
    NodeLabel { Tree node; }
}

adt Tree{
    LiteralTree { Label label; Nullable<Array<Tree>> children; }
    Unknown { SArray<char> name; Nullable<Label> label; Nullable<Array<Tree>> children; }
    Parameter { int index; }
    Child { Tree parent; int index; }
    TypeApplication { SArray<char> fn; Array<Tree> args; }
    Dummy { }  // TODO idk
}


// -------------------------------- Helpers ----------------------------------
SArray<char> str(int len, char[len] s) {
    return new SArray<char>(n=len, val=s);
}

Nullable<Label> noLabel() {
    return new None<Label>();
}

Nullable<Array<Tree>> noChildren() {
    return new None<Array<Tree>>();
}

Nullable<Array<Tree>> zeroChildren() {
    return new Some<Array<Tree>>(newArray<Tree>());
}

Tree newUnknown(int len, char[len] name) {
    return new Unknown(name = str(len, name), label=noLabel(), children=noChildren());
}

// -------------------------------- Constraint trying ----------------------------------


generator void negative_example_finder(ref Tree x0, ref Tree x1, ref Tree o){
    int t = ??;
    x0 = get_ex(t, 0);
    x1 = get_ex(t, 1);
    x2 = get_ex(t, 2);

    int s = ??;
    o = get_ex(s, 2);
    assert o != x2;
}

// Returns the ith argument of the tth example.
int get_ex(int t, int i) {
	if (t == 0) {
	    if (i == 0) {
	        return new LiteralTree(label = new LiteralLabel(label = str(4, "int")),
                                   children = zeroChildren());
	    }
	    if (i == 1) { return newUnknown(3, "t2"); }
	    if (i == 2) { return newUnknown(3, "t2"); }
	}
    if (t == 1) {
        if (i == 0) { return newUnknown(3, "t1"); }
        if (i == 1) { return newUnknown(3, "t2"); }
        if (i == 2) { return newUnknown(3, "t2"); }
    }
    if (t == 2) {
        if (i == 0) { return newUnknown(3, "t2"); }
        if (i == 1) { return newUnknown(3, "t3"); }
        if (i == 2) { return newUnknown(3, "t3"); }
    }
}

void negative_example(ref Tree x0, ref Tree x1, ref Tree o){
	negative_example_finder(x0, x1, o);
}

// TODO this is kinda dumb bc we can just linear scan for this in Kotlin
// TODO try concrete fixed type and total type equality first
//    (concrete can be subsumed by total type eq?)






